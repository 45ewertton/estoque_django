Controle de estoque utilizando Django (Padrão MTV)

- Crud do produto OK
- Crud de empresa OK
    - Criar novo campo em empresas OK
    - Tratar erros de update das empresas caso tenham nomes, cnpjs e telefones iguais OK
    - Fazer script para "ativar" o modal de update em caso de campos iguais OK
    - Implementar mensagens de "Success" para acções de update e create OK
- Paginação dos produtos e empresas cadastradas OK
     - Desabilitar o primeiro e último botão da paginação (Utilizar ELSE, por href="#" para desabilitar e mudar a cor para cinza) OK
- NavBar OK
- Organizar forms de produto e empresa (Cadastrar e Atualizar) OK
- Realização do sistema de busca de produtos e empresas OK
    - Busca por todos os campos OK
- BASES HTML OK
    - Reduzir os bases.html em um único base para reaproveitar a navbar (base_navbar.html) OK
    - Criar um base_paginator.html para reaproveitamento da paginação das duas apps OK
- Ordenar (produtos e empresas) de acordo com o campo selecionado OK
    - Ordenar todos os itens e não perder a ordenação caso ocorra a paginação OK
    - Ordenar itens pesquisados e não perder a ordenação caso ocorra a paginação OK
- Login de usuário OK
- Registrar usuário OK
- Identificação do usuário OK
- FK's de User OK
    - Product OK
    - Company OK
- Alterar senha de usuário OK
- O usuário vai ser capaz de cadastrar produtos/empresas e ter controle sobre ele (CRUD) OK
- Criar nova app utilizando Class Based View (CBV)
    - Listagem de clientes OK
    - Criação de clientes OK
    - Atualização de clientes OK
    - Deletar clientes OK
    - Visualização de um único cliente*
    - Verificar erros nos formulários OK
    - Utilizar mensagens para ações de sucesso
    - Paginação
    - Busca
    - ordenar
    - FK com user
- Criar um template base para busca